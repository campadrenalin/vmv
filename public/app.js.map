{"version":3,"sources":["app/demo.vue","app/vmv.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;AAAA","file":"public/app.js","sourcesContent":[";(function(){\n\"use strict\";\n\nvar vmv = require('vmv');\n\nmodule.exports = {\n    mixins: [new vmv()],\n    data: function data() {\n        return {\n            name: \"\"\n        };\n    }\n};\n})()\nif (module.exports.__esModule) module.exports = module.exports.default\nvar __vue__options__ = (typeof module.exports === \"function\"? module.exports.options: module.exports)\nif (__vue__options__.functional) {console.error(\"[vueify] functional components are not supported and should be defined in plain js files using render functions.\")}\n__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',[_c('label',[_vm._v(\"Nickname: \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.name),expression:\"name\"}],attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.name)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.name=$event.target.value}}})])])}\n__vue__options__.staticRenderFns = []\nif (module.hot) {(function () {  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-23240e1f\", __vue__options__)\n  } else {\n    hotAPI.reload(\"data-v-23240e1f\", __vue__options__)\n  }\n})()}","var _ = require('underscore');\nvar Vue = require('vue');\n\nVmvAPI = Vue.extend({\n    created() {\n        var self = this;\n        for (validator_name in this.$options.validators) {\n            this.__proto__[validator_name] = function() {\n                return self.mkRelation(validator_name, arguments)\n            }\n        }\n    },\n    methods: {\n        mkRelation: function(validator_name, init_args) {\n            var rel = new VmvRelation({\n                propsData: {\n                    parent : this,\n                    inputs : _.find(init_args, _.isString) || '',\n                    args   : _.find(init_args, _.isArray)  || [],\n                    mods   : _.filter(init_args, _.isFunction),\n                    callback : this.$options.validators[validator_name]\n                }\n            });\n\n            var rels = this.$options.relations;\n            var inputs = _.keys(rel._inputs);\n            for (i in inputs) {\n                var input = inputs[i];\n                if (rels[input] === undefined)\n                    rels[input] = {};\n                rels[input][validator_name] = rel;\n            }\n            return this;\n        }\n    },\n    validators: {\n        alphaNum: function(inputs, arguments) {\n            return true\n        }\n    },\n    relations: {}\n});\n\nVmvRelation = Vue.extend({\n    props: [\"parent\", \"inputs\", \"callback\", \"args\", \"mods\"],\n    data: function() {\n        return {\n            dirty:   false,\n            result:  undefined,\n            error:   undefined,\n        }\n    },\n    computed: {\n        pending: function() {\n            return this.dirty && !this.result && !this.error;\n        },\n        state: function() {\n            return this.pending ? 'pending'\n                :  this.okay    ? 'okay'\n                :  this.error   ? 'error'\n                :                 ''\n                ;\n        },\n        _inputs: function() {\n            var names = this.inputs.split(/ +/);\n            return _.object(\n                names,\n                _.map(names, _.propertyOf(this.parent))\n            );\n        }\n    },\n    watch: {\n        _inputs: function() { this.ask(); }\n    },\n    methods: {\n        ask: function() {\n            this.dirty = true;\n            this.result = undefined;\n            this.error  = undefined;\n            var result = this.callback(this._inputs, this.arguments);\n            if (result === true) {\n                this.resolve(result)\n            } else if (result === false) {\n                this.reject(result)\n            } else {\n                // TODO: invalidate in-flight work that no longer matches input data\n                result\n                    .then(_.bind(this.resolve, this))\n                    .catch(_.bind(this.reject, this));\n            }\n        },\n        resolve: function(data) {\n            this.dirty  = false;\n            this.result = data || true;\n            this.error  = false;\n        },\n        reject: function(data) {\n            this.dirty  = false;\n            this.result = false;\n            this.error  = data || false;\n        },\n    },\n});\n\nVmvAPI.Relation = VmvRelation;\n\nmodule.exports = VmvAPI;\n"]}